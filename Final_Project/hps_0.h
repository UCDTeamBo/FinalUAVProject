#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'simple_system' in
 * file './simple_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'fpga_onchip_ram', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'FPGA_ONCHIP_RAM_'.
 * The prefix is the slave descriptor.
 */
#define FPGA_ONCHIP_RAM_COMPONENT_TYPE altera_avalon_onchip_memory2
#define FPGA_ONCHIP_RAM_COMPONENT_NAME fpga_onchip_ram
#define FPGA_ONCHIP_RAM_BASE 0x0
#define FPGA_ONCHIP_RAM_SPAN 65536
#define FPGA_ONCHIP_RAM_END 0xffff
#define FPGA_ONCHIP_RAM_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define FPGA_ONCHIP_RAM_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define FPGA_ONCHIP_RAM_CONTENTS_INFO ""
#define FPGA_ONCHIP_RAM_DUAL_PORT 0
#define FPGA_ONCHIP_RAM_GUI_RAM_BLOCK_TYPE AUTO
#define FPGA_ONCHIP_RAM_INIT_CONTENTS_FILE simple_system_fpga_onchip_ram
#define FPGA_ONCHIP_RAM_INIT_MEM_CONTENT 1
#define FPGA_ONCHIP_RAM_INSTANCE_ID NONE
#define FPGA_ONCHIP_RAM_NON_DEFAULT_INIT_FILE_ENABLED 0
#define FPGA_ONCHIP_RAM_RAM_BLOCK_TYPE AUTO
#define FPGA_ONCHIP_RAM_READ_DURING_WRITE_MODE DONT_CARE
#define FPGA_ONCHIP_RAM_SINGLE_CLOCK_OP 0
#define FPGA_ONCHIP_RAM_SIZE_MULTIPLE 1
#define FPGA_ONCHIP_RAM_SIZE_VALUE 65536
#define FPGA_ONCHIP_RAM_WRITABLE 1
#define FPGA_ONCHIP_RAM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define FPGA_ONCHIP_RAM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define FPGA_ONCHIP_RAM_MEMORY_INFO_GENERATE_HEX 1
#define FPGA_ONCHIP_RAM_MEMORY_INFO_HAS_BYTE_LANE 0
#define FPGA_ONCHIP_RAM_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define FPGA_ONCHIP_RAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 64
#define FPGA_ONCHIP_RAM_MEMORY_INFO_MEM_INIT_FILENAME simple_system_fpga_onchip_ram

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x10000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x10007
#define SYSID_QSYS_ID 4660
#define SYSID_QSYS_TIMESTAMP 1432672964

/*
 * Macros for device 'fpga_led', class 'altera_avalon_pio'
 * The macros are prefixed with 'FPGA_LED_'.
 * The prefix is the slave descriptor.
 */
#define FPGA_LED_COMPONENT_TYPE altera_avalon_pio
#define FPGA_LED_COMPONENT_NAME fpga_led
#define FPGA_LED_BASE 0x10040
#define FPGA_LED_SPAN 32
#define FPGA_LED_END 0x1005f
#define FPGA_LED_BIT_CLEARING_EDGE_REGISTER 0
#define FPGA_LED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FPGA_LED_CAPTURE 0
#define FPGA_LED_DATA_WIDTH 4
#define FPGA_LED_DO_TEST_BENCH_WIRING 0
#define FPGA_LED_DRIVEN_SIM_VALUE 0
#define FPGA_LED_EDGE_TYPE NONE
#define FPGA_LED_FREQ 25000000
#define FPGA_LED_HAS_IN 0
#define FPGA_LED_HAS_OUT 1
#define FPGA_LED_HAS_TRI 0
#define FPGA_LED_IRQ_TYPE NONE
#define FPGA_LED_RESET_VALUE 0

/*
 * Macros for device 'fpga_key', class 'altera_avalon_pio'
 * The macros are prefixed with 'FPGA_KEY_'.
 * The prefix is the slave descriptor.
 */
#define FPGA_KEY_COMPONENT_TYPE altera_avalon_pio
#define FPGA_KEY_COMPONENT_NAME fpga_key
#define FPGA_KEY_BASE 0x10080
#define FPGA_KEY_SPAN 32
#define FPGA_KEY_END 0x1009f
#define FPGA_KEY_BIT_CLEARING_EDGE_REGISTER 0
#define FPGA_KEY_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FPGA_KEY_CAPTURE 1
#define FPGA_KEY_DATA_WIDTH 4
#define FPGA_KEY_DO_TEST_BENCH_WIRING 0
#define FPGA_KEY_DRIVEN_SIM_VALUE 0
#define FPGA_KEY_EDGE_TYPE RISING
#define FPGA_KEY_FREQ 25000000
#define FPGA_KEY_HAS_IN 1
#define FPGA_KEY_HAS_OUT 0
#define FPGA_KEY_HAS_TRI 0
#define FPGA_KEY_IRQ_TYPE NONE
#define FPGA_KEY_RESET_VALUE 0

/*
 * Macros for device 'slide_sw', class 'altera_avalon_pio'
 * The macros are prefixed with 'SLIDE_SW_'.
 * The prefix is the slave descriptor.
 */
#define SLIDE_SW_COMPONENT_TYPE altera_avalon_pio
#define SLIDE_SW_COMPONENT_NAME slide_sw
#define SLIDE_SW_BASE 0x100c0
#define SLIDE_SW_SPAN 32
#define SLIDE_SW_END 0x100df
#define SLIDE_SW_BIT_CLEARING_EDGE_REGISTER 0
#define SLIDE_SW_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SLIDE_SW_CAPTURE 1
#define SLIDE_SW_DATA_WIDTH 4
#define SLIDE_SW_DO_TEST_BENCH_WIRING 0
#define SLIDE_SW_DRIVEN_SIM_VALUE 0
#define SLIDE_SW_EDGE_TYPE RISING
#define SLIDE_SW_FREQ 25000000
#define SLIDE_SW_HAS_IN 1
#define SLIDE_SW_HAS_OUT 0
#define SLIDE_SW_HAS_TRI 0
#define SLIDE_SW_IRQ_TYPE NONE
#define SLIDE_SW_RESET_VALUE 0

/*
 * Macros for device 'fpga_sensor', class 'altera_avalon_pio'
 * The macros are prefixed with 'FPGA_SENSOR_'.
 * The prefix is the slave descriptor.
 */
#define FPGA_SENSOR_COMPONENT_TYPE altera_avalon_pio
#define FPGA_SENSOR_COMPONENT_NAME fpga_sensor
#define FPGA_SENSOR_BASE 0x10100
#define FPGA_SENSOR_SPAN 32
#define FPGA_SENSOR_END 0x1011f
#define FPGA_SENSOR_BIT_CLEARING_EDGE_REGISTER 0
#define FPGA_SENSOR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FPGA_SENSOR_CAPTURE 0
#define FPGA_SENSOR_DATA_WIDTH 4
#define FPGA_SENSOR_DO_TEST_BENCH_WIRING 0
#define FPGA_SENSOR_DRIVEN_SIM_VALUE 0
#define FPGA_SENSOR_EDGE_TYPE NONE
#define FPGA_SENSOR_FREQ 25000000
#define FPGA_SENSOR_HAS_IN 1
#define FPGA_SENSOR_HAS_OUT 0
#define FPGA_SENSOR_HAS_TRI 0
#define FPGA_SENSOR_IRQ_TYPE NONE
#define FPGA_SENSOR_RESET_VALUE 0

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x20000
#define JTAG_UART_SPAN 16
#define JTAG_UART_END 0x2000f
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8


#endif /* _ALTERA_HPS_0_H_ */
